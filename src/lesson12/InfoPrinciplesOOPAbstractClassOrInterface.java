package lesson12;

public class InfoPrinciplesOOPAbstractClassOrInterface {
    /*
     * принципы ООП Объектно-ориентированное программирование (в дальнейшем ООП) — парадигма программирования, в которой
     * основными концепциями являются понятия объектов и классов.
     * 
     * В центре ООП находится понятие объекта.
     * 
     * Объект — это сущность, экземпляр класса, которой можно посылать сообщения, и которая может на них реагировать,
     * используя свои данные. Данные объекта скрыты от остальной программы. Сокрытие данных называется инкапсуляцией.
     * 
     * Инкапсуляция - сокрытии реализации. Клиентский код видит только интерфейс. ( public, private, getters and
     * setters)
     * 
     * Наследование — это свойство системы, позволяющее описать новый класс на основе уже существующего с частично или
     * полностью заимствующейся функциональностью. Класс, от которого производится наследование, называется базовым,
     * родительским или суперклассом. Новый класс — потомком, наследником или производным классом
     * 
     * Полиморфизм - «один интерфейс, множество методов«. Primer polimorfizma - kogda odin i tot zhe metod rabotaet dlja
     * raznyxi typov dannyx
     * 
     * 
     */

    /*
     * Абстрагирование — это способ выделить набор значимых характеристик объекта, исключая из рассмотрения не значимые
     * Соответственно, абстракция — это набор всех таких характеристик.
     * 
     * Инкапсуляция — это свойство системы, позволяющее объединить данные и методы, работающие с ними в классе, и скрыть
     * детали реализации от пользователя.
     * 
     * Наследование — это свойство системы, позволяющее описать новый класс на основе уже существующего с частично или
     * полностью заимствующейся функциональностью. Класс, от которого производится наследование, называется базовым,
     * родительским или суперклассом. Новый класс — потомком, наследником или производным классом
     * 
     * Полиморфизм — это свойство системы использовать объекты с одинаковым интерфейсом без информации о типе и
     * внутренней структуре объекта.
     */

    // AbstractClass Or Interface?
    // vopros: kak ponjat' nuzhen abstract class ili interface ?
    // otvet: esli net ni odnogo metoda s realizaciej, to est' vse metody abstract, togdda ispol'zovat' Interface.
    // I esli est' polja (!!!!) - togda eto abstract class, interface neset tol'ko povedenie

    // metody tol'ko abstract, net polej - Interface
    // est' polja, hotja by odin metod s realizaciej - abstract class

    // private methods opuskajutsja vniz koda, public - na verhu
}
